import pandas as pd
import folium
import json
import geopandas as gpd
import osmnx as ox
from folium.plugins import HeatMap
from shapely.geometry import Polygon

def parse_geojson_buildings(file_path):
    """
    –ü–∞—Ä—Å–∏—Ç GeoJSON —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤ –ø–æ—Ä—è–¥–∫–µ: [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞, —ç—Ç–∞–∂–∏]
    """
    with open(file_path, 'r', encoding='utf-8') as f:
        geojson_data = json.load(f)
    
    buildings_list = []
    
    for feature in geojson_data['features']:
        properties = feature.get('properties', {})
        geometry = feature.get('geometry', {})
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        if geometry.get('type') == 'Point' and 'coordinates' in geometry:
            # GeoJSON: [longitude, latitude]
            longitude, latitude = geometry['coordinates']
        else:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π
        building_levels = properties.get('building:levels')
        if building_levels:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                floors = int(building_levels)
            except (ValueError, TypeError):
                floors = 1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            floors = 1  # –ï—Å–ª–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞, —ç—Ç–∞–∂–∏
        buildings_list.append([latitude, longitude, floors * 10])  # –£–º–µ–Ω—å—à–∏–ª –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    
    return buildings_list

def visualize_polygons(geometry):
    lats, lons = get_lat_lon(geometry)
    
    m = folium.Map(location=[sum(lats)/len(lats), sum(lons)/len(lons)], zoom_start=13, tiles='cartodbpositron')
    
    overlay = gpd.GeoSeries(geometry).to_json()
    folium.GeoJson(overlay, name='boundary').add_to(m)
    
    return m

def get_lat_lon(geometry):
    lon = geometry.apply(lambda x: x.x if x.type == 'Point' else x.centroid.x)
    lat = geometry.apply(lambda x: x.y if x.type == 'Point' else x.centroid.y)
    return lat, lon

def get_city_boundary(city_name):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –∏–∑ OSM
    """
    try:
        print(f"üîç –ò—â–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è: {city_name}")
        polygon_city = ox.geometries_from_place(city_name, {'boundary':'administrative'}).reset_index()
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞
        polygon_filtered = polygon_city[
            (polygon_city['name'].str.contains('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥', na=False)) |
            (polygon_city['name'].str.contains('Nizhny Novgorod', na=False)) |
            (polygon_city['admin_level'] == '8') |
            (polygon_city['admin_level'] == '6')
        ]
        
        if len(polygon_filtered) > 0:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: {len(polygon_filtered)}")
            return polygon_filtered
        else:
            print("‚ö†Ô∏è –ü–æ–ª–∏–≥–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –≤—Ä—É—á–Ω—É—é")
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –≤—Ä—É—á–Ω—É—é –¥–ª—è –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞
            nizhny_novgorod_bounds = [
                [56.20, 43.80],  # —é–≥–æ-–∑–∞–ø–∞–¥
                [56.20, 44.10],  # —é–≥–æ-–≤–æ—Å—Ç–æ–∫  
                [56.40, 44.10],  # —Å–µ–≤–µ—Ä–æ-–≤–æ—Å—Ç–æ–∫
                [56.40, 43.80],  # —Å–µ–≤–µ—Ä–æ-–∑–∞–ø–∞–¥
                [56.20, 43.80]   # –∑–∞–º—ã–∫–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω
            ]
            
            manual_polygon = gpd.GeoDataFrame({
                'name': ['–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥ (—Ä—É—á–Ω–æ–π)'],
                'geometry': [Polygon(nizhny_novgorod_bounds)]
            })
            return manual_polygon
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä–∞–Ω–∏—Ü: {e}")
        return None

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–¥–∞–Ω–∏–π –∏–∑ GeoJSON
buildings_data = parse_geojson_buildings('data/houses.geojson')

# –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
df_buildings = pd.DataFrame(buildings_data, columns=['lat', 'lon', 'weight'])
max_weight = df_buildings['weight'].max()

print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–¥–∞–Ω–∏–π: {len(buildings_data)}")
print(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å: {max_weight}")

# –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞
print("\nüó∫Ô∏è –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞...")
city_boundary = get_city_boundary('–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥, –†–æ—Å—Å–∏—è')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (—Ü–µ–Ω—Ç—Ä –Ω–∞ –ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥)
hmap = folium.Map(location=[56.326, 44.005], zoom_start=11)

# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É
if city_boundary is not None:
    city_boundary_layer = folium.FeatureGroup(name='–ì—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞')
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –≤ GeoJSON –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –∫–∞—Ä—Ç—É
    boundary_geojson = gpd.GeoSeries(city_boundary['geometry']).to_json()
    folium.GeoJson(
        boundary_geojson,
        name='–ì—Ä–∞–Ω–∏—Ü—ã –ù–∏–∂–Ω–µ–≥–æ –ù–æ–≤–≥–æ—Ä–æ–¥–∞',
        style_function=lambda x: {
            'fillColor': 'lightblue',
            'color': 'blue',
            'weight': 2,
            'fillOpacity': 0.1
        }
    ).add_to(city_boundary_layer)
    
    hmap.add_child(city_boundary_layer)
    print("‚úÖ –ì—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É")

# –°–ª–æ–π —Å –ø–ª–æ—Ç–Ω–æ—Å—Ç—å—é –∑–∞—Å—Ç—Ä–æ–π–∫–∏ - –ë–û–õ–ï–ï –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
building_density = folium.FeatureGroup(name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ú–°–ë –∏ –ò–ü')

hm = HeatMap(
    buildings_data,
    min_opacity=0.3,  # –£–≤–µ–ª–∏—á–∏–ª –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    max_val=max_weight * 0.4,  # –ü–æ–Ω–∏–∑–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
    radius=8,  # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–¥–∏—É—Å –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö –≥—Ä–∞–Ω–∏—Ü
    blur=10,     # –£–º–µ–Ω—å—à–∏–ª —Ä–∞–∑–º—ã—Ç–∏–µ –¥–ª—è –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    max_zoom=18,  # –£–≤–µ–ª–∏—á–∏–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑—É–º
    gradient={    # –ë–æ–ª–µ–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        0.1: 'blue',
        0.2: 'blue',
        0.3: 'lime', 
        0.4: 'lime',
        0.5: 'yellow',
        0.6: 'yellow',
        0.7: 'orange',
        0.8: 'orange',
        0.9: 'red',
        1.0: 'red'
    }
)

building_density.add_child(hm)

# –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∏–ª–∏–∞–ª—ã (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    branches = pd.read_csv('data/branches.csv', sep=';')  # –î–æ–±–∞–≤–∏–ª sep=';'
    filial_markers = folium.FeatureGroup(name='–û—Ç–¥–µ–ª–µ–Ω–∏—è –ê–û ¬´–ê–ª—å—Ñ–∞-–ë–∞–Ω–∫¬ª')

    for i, row in branches.iterrows():
        folium.Marker(
            location=[row['lat'], row['lon']],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'lng' –Ω–∞ 'lon'
            popup=row['name'],
            icon=folium.DivIcon(
            html='<div style="font-size: 14px; font-weight: bold; color: white; background-color: #EF3124; border: 2px solid white; border-radius: 50%; width: 22px; height: 22px; text-align: center; line-height: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.3); font-family: Arial, sans-serif;">–ê</div>',
            icon_size=(22, 22),
            icon_anchor=(11, 11)
        )
        ).add_to(filial_markers)
    
    hmap.add_child(filial_markers)
    print("‚úÖ –§–∏–ª–∏–∞–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É")
except FileNotFoundError:
    print("‚ö†Ô∏è –§–∞–π–ª branches.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª–∏–∞–ª–æ–≤: {e}")

# –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã (–µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
try:
    competitor = pd.read_csv('data/competitors.csv', sep=';')  # –î–æ–±–∞–≤–∏–ª sep=';'
    competitor_markers = folium.FeatureGroup(name='–ë–∞–Ω–∫–∏-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã')

    for index, row in competitor.iterrows():
        folium.Marker(
            location=[row['lat'], row['lon']],  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'lng' –Ω–∞ 'lon'
            popup=row['name'],
            icon=folium.Icon(color='blue')
        ).add_to(competitor_markers)
    
    hmap.add_child(competitor_markers)
    print("‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç—É")
except FileNotFoundError:
    print("‚ö†Ô∏è –§–∞–π–ª competitors.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ª–æ–π
hmap.add_child(building_density)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è–º–∏
folium.LayerControl(collapsed=False).add_to(hmap)

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É
hmap.save('index.html')
print("‚úÖ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'index.html'")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
if city_boundary is not None:
    print("\nüîç –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ä–æ–¥–∞...")
    boundary_map = visualize_polygons(city_boundary['geometry'])
    boundary_map.save('city_boundary.html')
    print("‚úÖ –ö–∞—Ä—Ç–∞ –≥—Ä–∞–Ω–∏—Ü —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ 'city_boundary.html'")

print("\nüéØ –ù–ê–°–¢–†–û–ô–ö–ò –î–õ–Ø –ë–û–õ–¨–®–ï–ô –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
print("   ‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω —Ä–∞–¥–∏—É—Å (8) - —á–µ—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã")
print("   ‚Ä¢ –£–º–µ–Ω—å—à–µ–Ω–æ —Ä–∞–∑–º—ã—Ç–∏–µ (10) - –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π")
print("   ‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0.3)")
print("   ‚Ä¢ –ü–æ–Ω–∏–∂–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞")
print("   ‚Ä¢ –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–æ–≤")